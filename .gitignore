/** CODE FOR A SELECTION SORTING ANIMATION BASED ON COLOR AND LENGTH OF BARS
 * A selection sort works by selecting the smallest unsorted item and then swapping it with the item in the next position to be filled.
 * Goal: create bars of random uneven lengths and various colors, followed by sorting the bars from shortest to longest. It then adjusts the colors accordingly to create a rainbow.
 */

package square;
import java.util.Collections;
import java.util.Random;
import processing.core.PApplet;
/** Create an applet for the graphics by extending PApplet.
 */
public class Square extends PApplet {
	float[] number = new float[360];
	int SortedIndex = 0;
	/** This section sets up the basic structure of the applet, including the size and color of the window, and frameRate of the animation.
	 * It also declares the main variables, including the randomizer for the bar length and the timer variable to store the position of each bar.
	 */
	public void setup() {
		frameRate(100);
		size(640,360);
		colorMode(HSB, 360, 100, 100);
		background(103,22,100);
		noStroke();
		int timer = 0;
		float x = random (number [timer]);
		float Bar = number.length;
		Random random = new Random();
		while (timer < number.length){
			number [timer] = timer+1;
			timer++;	
		}
		int RandPos;
		timer = 0;
		/** the while loop keeps adding more bars until the set number of 359 is reached, and stores the position of each bar in an array.
		 * 
		 */
		while (timer < 359){
			float Temp = number [timer];
			RandPos = random.nextInt(number.length);
			number[timer] = number[RandPos];
			number[RandPos]=Temp;
			timer++;	
		}
	}	
	/**
	 *This code takes the bars with random lengths and colors, and starts organizing them by comparing one bar's length and hue of color to the one before it. 
	 *If it is smaller, it is put in the position of the one before it.
	 *This process continues until all of the bars have been sorted based on size and hue of color.
	 *The final result is a right triangle with shorter bars of colors of a longer wavelength on top, and longer bars of colors of a shorter wavelength on the bottom.
	 */
	public void draw() {
		background(0,0,0);
		int timer = 0;
		float SmallestBar = number[0];
		int PositionOfSmallestBar = 0;
		float Temp;
		SmallestBar = number[SortedIndex];
		PositionOfSmallestBar = SortedIndex;
		for (int i = SortedIndex; i < number.length; i++){
			if(number [i]<SmallestBar){
				SmallestBar = number[i];
				PositionOfSmallestBar = i;
			}
		} 
		Temp = number[SortedIndex];
		number[SortedIndex] = number[PositionOfSmallestBar];
		number[PositionOfSmallestBar] = Temp;
		if (SortedIndex < 359){
			SortedIndex++;
		}
		timer=0;
		while (timer < number.length){
			stroke (timer, 100, 100);
			line(100,timer, 100+number[timer], timer);
			timer++;
		}
	}
}


